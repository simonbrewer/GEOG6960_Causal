---
title: "GEOG 6960 Causality in Geog. Studies 6"
author: 
  - name: "Simon Brewer"
    email: simon.brewer@ess.utah.edu
    affiliations:
      - name: University of Utah
        address: 260 Central Campus Drive
        city: Salt Lake City
        state: UT
        postal-code: 84112
date: last-modified
format:
  html:
    toc: true
editor: visual
---

```{r}
#| echo: false
set.seed(42)
library(reticulate)
use_condaenv("causal")
```

## Introduction

In this lab, we're going to explore how to build and test structural equation models (SEMs). We'll use two examples: - The Grace and Keeley fire/plant abundance dataset (*keeley.csv*) - The mosquito net usage dataset (*mosquito_nets.csv*)

## Coding SEMs

Both R and Python have packages that allow you to create SEMs and estimate coefficients based on a dataset.

-   R: **lavaan** and **sem**
-   Python: **semopy** (`pip install semopy`)

First load (or install and load) the relevant packages. We'll need some additional packages to explore the data before model building.

::: {.panel-tabset group="language"}
# R

```{r}
#| output: false
library(tidyverse)
library(GGally)
library(lavaan)
library(lavaanPlot)
```

# Python

```{python}
import numpy as np
import pandas as pd
import seaborn as sns
import semopy
```
:::

## Example 1

### Data

Let's start by loading the Grace and Keeley dataset and exploring the values. There are (or should be) 8 variables (described in the appendix below). Note that this differs a little from the dataset used in the paper - there is an additional field (`elev`) which we will drop, and the community type variable is missing. Later, we'll adjust the DAG that we use as a basis for the model accordingly.

::: {.panel-tabset group="language"}
# R

```{r}
keeley <- read.csv("./data/keeley.csv")
keeley <- keeley %>%
  select(-elev)
str(keeley)
```

# Python

```{python}
keeley = pd.read_csv("./data/keeley.csv")
keeley.drop('elev', axis=1, inplace=True)
keeley.describe()
```
:::

Let's take a quick look at the distribution of the variables in the file. These are generally normally distributed (or at least close enough for our purposes). The one exception is the distance to coast variable which shows three clusters of plots.

::: {.panel-tabset group="language"}
# R

```{r}
ggpairs(keeley)
```

# Python

```{python}
sns.pairplot(keeley)
```
:::

We can also take a look at the covariance matrix based on the set of variables. (As a reminder, this is what our SEM will be trying to reproduce.)

::: {.panel-tabset group="language"}
# R

```{r}
cov(keeley)
```

# Python

```{python}
keeley.cov()
```
:::

### Creating a structural equation model

We'll start by creating a subset model (the same one we looked at in class). This will only use three variables (`age`, `firesev` and `cover`). These are related by the following DAG:

```{r echo=FALSE, warning=FALSE, message=FALSE}
library(ggdag)
grace_dag <- dagify(firesev ~ age,
                    cover ~ age + firesev,
                    coords = list(x = c(age = 1,
                                        firesev = 2,
                                        cover = 3), 
                                  y = c(age = 1,
                                        firesev = 2,
                                        cover = 1)
                    ),
                    exposure = "age",
                    outcome = "cover",
                    labels = c(age = "Stand age", 
                               firesev = "Fire severity", 
                               cover = "Plant cover")
)
ggdag(grace_dag, use_labels = "label", text = FALSE) +
  theme_dag()
```

Building a structural equation model usually takes two steps. First, we need to describe the DAG that relates the variables, and second, we use a dataset to estimate values for the paths and other parameters.

#### Model/DAG description

Both **lavaan** and **semopy** use a similar syntax to describe the model, based on R's formula syntax. For each endogenous variable (one that has at least one arrow *coming in* to it) in the graph, we need a formula to describe the paths. This is written as:

```         
y ~ x1 + x2 + ...
```

Where `y` is the variable of interest, and `x1`, `x2`, etc are all variables that are at the origin of the path flowing into `y`. For the DAG above, we need a formula for fire severity (`firesev`) and plant cover (`cover`). We do not need one for stand age as there are no incoming arrows in this DAG. The set of formula are specified as a character string. Note that the name of the variables in the formula need to exactly match the names of the data frame column that hold that variable.

::: {.panel-tabset group="language"}
# R

In R, these are generally written as one formula per line:

```{r}
keeley_formula = 
'firesev ~ age
cover ~ age + firesev
'
```

# Python

In Python, these are concatenated into a single line with line returns (`\n`) to separate the formula:

```{python}
keeley_formula = 'firesev ~ age\ncover ~ age + firesev'
```
:::

#### Model fitting

::: {.panel-tabset group="language"}
# R

In R, the function is `sem()`. This needs a minimum of two arguments: the model formula and the data frame containing the variables of interest. We also use the argument `meanstructure = TRUE` to return the intercepts:

```{r}
keeley_sem1 <- sem(keeley_formula, 
                   data = keeley,
                   meanstructure = TRUE)
```

# Python

In Python, ...:

```{python}
keeley_formula = 'firesev ~ age\ncover ~ age + firesev'
```
:::

Now let's explore the output.

::: {.panel-tabset group="language"}
# R

```{r}
summary(keeley_sem1, 
        standardize = TRUE, 
        rsq = TRUE)
```

There's quite a lot of output in the model summary. The various sections (from the top) are:

-   Model fitting details: the fitting and optimization method and the number of parameters estimated
-   Model test: the results of the Chi-squared test for goodness-of-fit
-   Parameter estimates: settings for parameter estimates (incl. standard errors)
-   Regressions: the path coefficients. For each one, there is
    -   The estimate
    -   The standard error
    -   The estimate as a $z$-score
    -   The $p$-value
    -   The estimate standardized for any latent variables (we don't have any)
    -   The standardized coefficient. This is the coefficient we would obtain if all the variables were $z$-score transformed, and allows comparison between the strength of the different paths
-   Intercepts: estimate of intercept/mean values for each endogenous variable. The columns are the same as the previous table
-   Variances: the estimate variance of the endogenous variables
-   R-Square: the $r$-squared value for each endogenous variable (how much of the variance of that variable was explained)

# Python

In Python, ...:

```{python}
keeley_formula = 'firesev ~ age\ncover ~ age + firesev'
```
:::

#### Model diagnostics

::: {.panel-tabset group="language"}
# R

In addition to the summary output, we can access model diagnostics using other functions. Using `anova()` will run the Chi-squared test comparing this model to a fully saturated model. In this case, the model we have fit is the saturated model, so the Chi-squared cannot be calculated (but see below for a better test):

```{r}
anova(keeley_sem1)
```

You can also obtain the model AIC with, not too surprisingly, the `AIC()` function. There are several other diagnostics that can be obtained with the `fitMeasures` function. This produces a large number of different test scores, so we'll limit it here to the root-mean squared error of approximation (RMSEA), which should ideally be below 0.1. Again, with a saturated model, this is zero and not very meaningful.

```{r}
fitMeasures(keeley_sem1, c('rmsea'))
```

# Python

In Python, ...:

```{python}
keeley_formula = 'firesev ~ age\ncover ~ age + firesev'
```
:::

#### Model visualization

An easier way to portray the results is to plot out the DAG with the SEM estimated coefficients on the paths. This should show significant paths between `age` and `firesev`, and between `firesev` and `cover`, but the direct path from `age` to `cover` is not significant.

::: {.panel-tabset group="language"}
# R

```{r eval=FALSE}
lavaanPlot(keeley_sem1, coef=TRUE, stars="regress")
```

![lavaanPlot](images/keeley_sem1.png)

# Python

In Python, ...:

```{python}
keeley_formula = 'firesev ~ age\ncover ~ age + firesev'
```
:::

#### A simpler model

As the path between age and cover appears non-significant, we can ask if it is really a necessary part of the model. To do this, we'll drop the path, rebuild the model and check the results of the Chi-squared test.

::: {.panel-tabset group="language"}
# R

```{r}
keeley_formula = 
'firesev ~ age
cover ~ firesev
'
keeley_sem2 <- sem(keeley_formula, 
                   data = keeley,
                   meanstructure = TRUE)
```

```{r}
summary(keeley_sem2, 
        standardize = TRUE, 
        rsq = TRUE)
```

# Python

In Python, these are concatenated into a single line with line returns (`\n`) to separate the formula:

```{python}
keeley_formula = 'firesev ~ age\ncover ~ age + firesev'
```
:::

Now we get a value for the Chi-squared test of about 3.3, and a $p$-value of about 0.07, which suggests there is no significant difference between this simpler model and the full covariance matrix. Or to put it more simply, dropping the path from `age` to `cover` has not made the model notably worse.

#### The full model

Now let's make the full model, detailed in the DAG below:

```{r echo=FALSE}
grace_dag <- dagify(age ~ distance,
                    hetero ~ distance,
                    abiotic ~ distance,
                    firesev ~ age,
                    cover ~ firesev,
                    rich ~ cover + hetero + abiotic + distance,
                    coords = list(x = c(distance = 1,
                                        age = 2,
                                        firesev = 3,
                                        hetero = 3,
                                        abiotic = 3,
                                        cover = 4,
                                        rich = 5), 
                                  y = c(distance = 2,
                                        age = 1,
                                        firesev = 1,
                                        hetero = 3,
                                        abiotic = 4,
                                        cover = 1,
                                        rich = 2)
                    ),
                    exposure = "firesev",
                    outcome = "rich"
)

ggdag(grace_dag) +
  theme_dag()
```

As before, start by building the paths. Note that, apart from `distance`, all variables are endogenous and will need a formula.

::: {.panel-tabset group="language"}
# R

```{r}
keeley_formula = 
'
age ~ distance
hetero ~ distance
abiotic ~ distance
firesev ~ age
cover ~ firesev
rich ~ cover + hetero + abiotic + distance
'
```

# Python

```{python}
keeley_formula = 'age ~ distance\nhetero ~ distance\nabiotic ~ distance\nfiresev ~ age\ncover ~ firesev\nrich ~ cover + hetero + abiotic + distance'
```
:::

Now let's build the model and check how well it fits.

::: {.panel-tabset group="language"}
# R

```{r}
keeley_sem3 <- sem(keeley_formula, 
                   data = keeley,
                   meanstructure = TRUE)
summary(keeley_sem3)
```

# Python

```{python}
keeley_formula = 'firesev ~ age\ncover ~ age + firesev'
```
:::

The goodness-of-fit value indicates that this model fits well (i.e. $p>0.05$), but it is close to the threshold. We can explore which of the missing paths may be the most useful to include to improve the fit by calculating the modification indices. These indicate the change in Chi-squared value if a path was included in the model.

::: {.panel-tabset group="language"}
# R

In R, we can calculate these with `modificationIndices`. We'll get these, sort for the largest index and print the top 5

```{r}
modificationIndices(keeley_sem3) %>%
  arrange(-mi) %>%
  head(5)
```

# Python

```{python}
keeley_formula = 'firesev ~ age\ncover ~ age + firesev'
```
:::

The path with the largest impact on the Chi-squared value is between `cover` and `hetero`. Physically, the most likely direction for this is that heterogeneity causally affects cover, so we'll include that (`cover ~ firesev + hetero`) and update this model.

::: {.panel-tabset group="language"}
# R

```{r}
keeley_formula = 
'
age ~ distance
hetero ~ distance
abiotic ~ distance
firesev ~ age
cover ~ firesev + hetero
rich ~ cover + hetero + abiotic + distance
'
keeley_sem4 <- sem(keeley_formula, 
                   data = keeley,
                   meanstructure = TRUE)
summary(keeley_sem4)
```

# Python

```{python}
keeley_formula = 'firesev ~ age\ncover ~ age + firesev'
```
:::

![lavaanPlot](images/keeley_sem4.png)

The new model shows a marginally significant negative relationship between heterogeneity and cover.

## Example 2

For a second example, you'll build and fit a structural equation model to the mosquito net data that we briefly introduced in the last lab. This is a simulated dataset on how the use of mosquito nets affects the risk of malaria (see appendix for details). Unlike the previous example, you'll need to work out the code on your own.

### Data

::: {.panel-tabset group="language"}
# R

```{r}
mosquito <- read.csv("./data/mosquito_nets.csv")
mosquito <- mosquito %>%
  select(-id)
str(mosquito)
```

```{r warning=FALSE, message=FALSE}
ggpairs(mosquito)
```

```{r warning=FALSE, message=FALSE}
ggplot(mosquito, aes(x = net, y = malaria_risk)) +
  geom_boxplot() +
  theme_bw()
```

# Python

```{python}
mosquito = pd.read_csv("./data/mosquito_nets.csv")
mosquito.drop('id', axis=1, inplace=True)
mosquito.describe()
```

```{python}
sns.pairplot(mosquito)
```

```{python}
sns.boxplot(mosquito, x="net", y="malaria_risk")
```
:::

### DAG

Now try to fit the full model as described by the DAG below. Start by creating the set of model formulae. A good first order test is to check that the total number of covariates (across all formulae) equals the number of arrows in the DAG. 

![lavaanPlot](images/mosquito_dag.png)

Once you've done this, fit and visualize the model then check the Chis-squared test. Does this give a good fit? Are there any missing paths that should be included? 


# Appendix: Data files

## Grace and Keely dataset *keeley.csv*

| Column header | Variable                 |
|---------------|--------------------------|
| distance      | Distance to coast (m)    |
| elev          | Elevation a.s.l.         |
| abiotic       | Abiotic favorability     |
| age           | Age of stand before fire |
| hetero        | Plot heterogeneity       |
| firesev       | Severity of fire         |
| cover         | Cover of plants          |
| rich          | Plant species richness   |

## Mosquito net usage dataset *mosquito_nets.csv*

Taken from https://github.com/r-causal/causalworkshop

| Column header | Variable                                                          |
|------------------------------------|------------------------------------|
| id            | observation ID                                                    |
| net           | Did the household use nets (F/T)                                  |
| net_num       | Did the household use nets (0/1)                                  |
| malaria_risk  | likelihood that someone in the household will be infected (0-100) |
| income        | Monthly income (\$)                                               |
| health        | Self-reported healthiness (0-100)                                 |
| household     | Number of people living in the household                          |
| eligible      | Eligibility for the free net program (0/1)                        |
| temperature   | Average temperature at night (C)                                  |
| resistance    | Resistance of mosquito strains to insecticide                     |
