---
title: "GEOG 6960 Causality in Geog. Studies 6"
author: 
  - name: "Simon Brewer"
    email: simon.brewer@ess.utah.edu
    affiliations:
      - name: University of Utah
        address: 260 Central Campus Drive
        city: Salt Lake City
        state: UT
        postal-code: 84112
date: last-modified
format:
  html:
    toc: true
editor: visual
---

```{r}
#| echo: false
set.seed(42)
library(reticulate)
use_condaenv("causal")
```

## Introduction

In this lab, we're going to explore how to build and test structural equation models (SEMs). We'll use two examples:
- The Grace and Keeley fire/plant abundance dataset (*keeley.csv*)
- The mosquito net usage dataset (*mosquito_nets.csv*)

## Coding SEMs

Both R and Python have packages that allow you to create SEMs and estimate coefficients based on a dataset. 

-   R: **lavaan** and **sem**
-   Python: **semopy** (`pip install semopy`)

First load (or install and load) the relevant packages. We'll need some additional packages to explore the data before model building. 

::: {.panel-tabset group="language"}
# R

```{r}
#| output: false
library(tidyverse)
library(GGally)
library(lavaan)
library(lavaanPlot)
```

# Python

```{python}
import numpy as np
import pandas as pd
import seaborn as sns
import semopy
```
:::

## Example 1

### Data

Let's start by loading the Grace and Keeley dataset and exploring the values. There are (or should be) 8 variables (described in the appendix below). Note that this differs a little from the dataset used in the paper - there is an additional field (`elev`) which we will drop, and the community type variable is missing. Later, we'll adjust the DAG that we use as a basis for the model accordingly.

::: {.panel-tabset group="language"}
# R


```{r}
keeley <- read.csv("./data/keeley.csv")
keeley <- keeley %>%
  select(-elev)
str(keeley)
```

# Python

```{python}
keeley = pd.read_csv("./data/keeley.csv")
keeley.drop('elev', axis=1, inplace=True)
keeley.describe()
```
:::

Let's take a quick look at the distribution of the variables in the file. These are generally normally distributed (or at least close enough for our purposes). The one exception is the distance to coast variable which shows three clusters of plots. 

::: {.panel-tabset group="language"}
# R


```{r}
ggpairs(keeley)
```

# Python

```{python}
sns.pairplot(keeley)
```
:::

We can also take a look at the covariance matrix based on the set of variables. (As a reminder, this is what our SEM will be trying to reproduce.)

::: {.panel-tabset group="language"}
# R


```{r}
cov(keeley)
```

# Python

```{python}
keeley.cov()
```
:::


### Creating a structural equation model

We'll start by creating a subset model (the same one we looked at in class). This will only use three variables (`age`, `firesev` and `cover`). These are related by the following DAG:

```{r}
library(ggdag)
chain_dag <- dagify(z ~ x,
                    y ~ x + z,
                    coords = list(x = c(x = 1, y = 3, z = 2),
                                  y = c(x = 1, y = 1, z = 2)),
                    exposure = "x",
                    outcome = "y")

ggdag(chain_dag) +
  theme_dag()
```

::: {.panel-tabset group="language"}
# R

We'll start by creating the DAG. In R the main function is `dagify()`. This takes a series of arguments:

-   The set of paths to include. These are specified using R's formula syntax, with the destination node on the left hand side and the origin on the right. So `X ~ Y` would make a path going from `X` to `Y`. Note that if `Y` has more than one path pointing to it, you should include both in the same formula. So `Y ~ X + Z`, with have two paths to Y from `X` and `Z` respectively
-   The coordinates specifying the position of each node
-   Which variable to use for the exposure and outcome \[optional\]
-   Labels for each node \[optional\]

```{r}
# grace_dag <- dagify(fire_sev ~ stand_age,
#                     abundance ~ fire_sev,
#                     richness ~ abundance + stand_age,
#                     coords = list(x = c(stand_age = 1,
#                                         fire_sev = 2,
#                                         abundance = 3,
#                                         richness = 4), 
#                                   y = c(stand_age = 1,
#                                         fire_sev = 1,
#                                         abundance = 1,
#                                         richness = 2)
#                     ),
#                     exposure = "fire_sev",
#                     outcome = "richness",
#                     labels = c(stand_age = "Stand age", 
#                                fire_sev = "Fire severity", 
#                                abundance = "Plant abundance",
#                                richness = "Richness")
# )
```

# Python

In Python, there are two arguments:

-   A list of nodes
-   A list of tuples defining each path (`"origin", "destination"`)

```{python}
# grace_dag = CausalGraphicalModel(
#     nodes=["stand_age", "fire_severity", "plant_abundance", "richness"],
#     edges=[
#         ("stand_age", "fire_severity"), 
#         ("stand_age", "richness"), 
#         ("fire_severity", "plant_abundance"),
#         ("plant_abundance", "richness")
#     ]
# )
```
:::



# Appendix: Data files

## Grace and Keely dataset *keeley.csv*

| Column header | Variable |
| --- | --- |
| distance | Distance to coast (m) |
| elev | Elevation a.s.l. |
| abiotic | Abiotic favorability |
| age | Age of stand before fire |
| hetero | Plot heterogeneity |
| firesev | Severity of fire |
| cover | Cover of plants |
| rich | Plant species richness |

## Mosquito net usage dataset *mosquito_nets.csv*

| Column header | Variable |
| --- | --- |
| id | observation ID |
| net | Did the household use nets (F/T) |
| net_num | Did the household use nets (0/1) |
| malaria_risk | likelihood that someone in the household will be infected (0-100) | 
|income | Monthly income ($) |
| health | Self-reported healthiness (0-100) |
| household | Number of people living in the household |
| eligible | Eligibility for the free net program (0/1) |
| temperature | Average temperature at night (C) |
| resistance | Resistance of mosquito strains to insecticide  |
